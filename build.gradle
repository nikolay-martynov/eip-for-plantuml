import org.apache.batik.transcoder.TranscoderInput
import org.apache.batik.transcoder.TranscoderOutput
import org.apache.batik.transcoder.image.PNGTranscoder
import org.apache.commons.text.CaseUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.apache.xmlgraphics', name: 'batik-transcoder', version: '1.11'
        classpath group: 'org.apache.xmlgraphics', name: 'batik-codec', version: '1.11'
        classpath group: 'org.apache.commons', name: 'commons-text', version: '1.7'
    }
}

Map<String, Integer> imageSizes = [
        Small: 50,
        ''   : 100,
        Large: 200,
]

task convertSvgToPng {
    description "Converts EIP SVG shapes into PNG files of different sizes"
    doLast {
        project.buildDir.mkdirs()
        file("enterprise-integration-pattern-shapes-for-gliffy/eip-svg-shapes").
                eachFileRecurse(groovy.io.FileType.FILES) { svgFile ->
                    if (!svgFile.name.endsWith('svg')) {
                        return
                    }
                    imageSizes.each { sizeName, sizeWidth ->
                        svgFile.withInputStream { svgStream ->
                            TranscoderInput transcoderInput = new TranscoderInput(svgStream)
                            String patternName = (svgFile.name =~ /[\w-]+__(.+)\.svg/)[0][1]
                            String spriteName = CaseUtils.toCamelCase(patternName, true,
                                    '-' as char,
                                    '_' as char,
                                    ' ' as char).replaceAll('[-_ ]', '') + sizeName
                            String pngName = spriteName + '.png'
                            new File(project.buildDir, pngName).withOutputStream { pngStream ->
                                TranscoderOutput transcoderOutput = new TranscoderOutput(pngStream)
                                PNGTranscoder transcoder = new PNGTranscoder().tap {
                                    addTranscodingHint(PNGTranscoder.KEY_WIDTH, sizeWidth as Float)
                                }
                                transcoder.transcode(transcoderInput, transcoderOutput)
                            }
                        }
                    }
                }
    }
}

task clean {
    description "Cleans output directory"
    doLast {
        project.buildDir.deleteDir()
    }
}
